# Generated by Django 5.1.7 on 2025-03-20 23:21

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('hobby_categories', '0017_delete_human'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Подтверждение E-mail')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Доступ к панели администратора')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Администратор')),
                ('is_active', models.BooleanField(default=True, verbose_name='Онлайн')),
                ('age', models.PositiveSmallIntegerField(default=18, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)], verbose_name='Возраст')),
                ('gender', models.CharField(choices=[('M', 'Мужчина'), ('F', 'Женщина')], default='M', max_length=1, verbose_name='Пол')),
                ('current_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_members', to='hobby_categories.hobbycategory', verbose_name='Текущая категория')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['first_name'],
                'indexes': [models.Index(fields=['email'], name='users_custo_email_c80f75_idx')],
            },
        ),
    ]
